"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""


def generate_triangle(n):
    accumulator = 0
    for i in range(n+1):
        accumulator += i
    return accumulator


def factorize(n):
    # attempt to factor using gcd
    factors = []
    i = 1
    while True:
        if (n % i) == 0:
            # print('found factor', factor, 'i', i, 'n', n)
            factors.append(i)
        i += 1
        if i > n / 2:
            factors.append(n)
            break
    return factors


if __name__ == "__main__":
    """
    FUCK THIS SHIT WILL NEVER WORK
    IT TAKES TOO DAMN LONG COMPUTATIONALLY FUUUUUUCK
    """
    i = 1
    while True:
        break
        length = len(factorize(generate_triangle(i)))
        if length > 400:
            print(i)
            break
        i += 1
        if i % 10 == 0:
            print('reached', i, 'len', length)
